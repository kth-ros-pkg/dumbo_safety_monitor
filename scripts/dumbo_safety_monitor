#!/usr/bin/env python

#   dumbo_safety_monitor
# 
#   Created on: Mar 12, 2014
#   Authors:   Francisco Vina
#             fevb <at> kth.se
# 

#  Copyright (c) 2014, Francisco Vina, CVAP, KTH
#    All rights reserved.

#    Redistribution and use in source and binary forms, with or without
#    modification, are permitted provided that the following conditions are met:
#       * Redistributions of source code must retain the above copyright
#         notice, this list of conditions and the following disclaimer.
#       * Redistributions in binary form must reproduce the above copyright
#         notice, this list of conditions and the following disclaimer in the
#         documentation and/or other materials provided with the distribution.
#       * Neither the name of KTH nor the
#         names of its contributors may be used to endorse or promote products
#         derived from this software without specific prior written permission.

#    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
#    ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
#    WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
#    DISCLAIMED. IN NO EVENT SHALL KTH BE LIABLE FOR ANY
#    DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
#    (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
#    LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
#    ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
#    (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
#    SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
import array
from geometry_msgs.msg._WrenchStamped import WrenchStamped
from std_srvs.srv import *

import rospy
from numpy import *

class DumboSafetyMonitor():
    """
    Checks force-torque sensor values and stops arms in case force/torque readings are too large
    """
    def __init__(self):

        # get max force/torque params
        self._max_force = rospy.get_param('~max_force')
        self._max_torque = rospy.get_param('~max_torque')

        self._time_l = rospy.Time.now()
        self._time_r = rospy.Time.now()

        self._stop_srv = rospy.ServiceProxy('/dumbo/stop', Empty)

        self._sleep_srv = rospy.Service('~sleep', Empty, self._sleep)

        rospy.Subscriber('/left_arm_ft_sensor/gravity_compensation/ft_compensated', WrenchStamped, self._leftFTCallback)
        rospy.Subscriber('/right_arm_ft_sensor/gravity_compensation/ft_compensated', WrenchStamped, self._rightFTCallback)


    def _leftFTCallback(self, wrench):
        """
        Callback for left arm FT sensor
        """
        force = array([wrench.wrench.force.x, wrench.wrench.force.y, wrench.wrench.force.z])
        torque = array([wrench.wrench.torque.x, wrench.wrench.torque.y, wrench.wrench.torque.z])

        if linalg.norm(force) > self._max_force:

            if ((rospy.Time.now()-self._time_l).to_sec() > 1.0):
                rospy.logerr('Force measurement too high on left arm, stopping the arm...')
                self._time_l = rospy.Time.now()
                self._stop_srv()

        if linalg.norm(torque) > self._max_torque:

            if ((rospy.Time.now()-self._time_l).to_sec() > 1.0):
                rospy.logerr('Torque measurement too high on left arm, stopping the arm...')
                self._time_l = rospy.Time.now()
                self._stop_srv()


    def _rightFTCallback(self, wrench):
        """
        Callback for right arm FT sensor
        """
        force = array([wrench.wrench.force.x, wrench.wrench.force.y, wrench.wrench.force.z])
        torque = array([wrench.wrench.torque.x, wrench.wrench.torque.y, wrench.wrench.torque.z])

        if linalg.norm(force) > self._max_force:

            if ((rospy.Time.now()-self._time_r).to_sec() > 1.0):
                rospy.logerr('Force measurement too high on right arm, stopping the arm...')
                self._time_r = rospy.Time.now()
                self._stop_srv()

        if linalg.norm(torque) > self._max_torque:

            if ((rospy.Time.now()-self._time_r).to_sec() > 1.0):
                rospy.logerr('Torque measurement too high on right arm, stopping the arm...')
                self._time_r = rospy.Time.now()
                self._stop_srv()

    def _sleep(self, req):
        """
        Pauses the checking of F/T limits for 3 seconds
        """
        rospy.sleep(3.0)
        return EmptyResponse()


if __name__ == '__main__':
    rospy.init_node("dumbo_safety_monitor")
    DumboSafetyMonitor()
    rospy.spin()
